//------------------------------------
//函数解释
/*
	FILE *cls;if(!(cls=fopen("data.txt","r+"))) cls=fopen("data.txt","w+");	//打开class文件，若没有则新建一个文件
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

FILE *fopen(const char *filename, const char *mode)：

    功能：以指定的模式打开文件，并返回一个指向文件的指针。
    参数：filename为要打开或创建的文件名，mode为打开文件的模式。
    返回值：成功打开文件时，返回指向文件的指针；打开失败时，返回NULL指针。
    注释：
        "r"：以只读方式打开文件。文件必须存在，否则打开失败。
        "w"：以写入方式打开文件。如果文件存在，则会清空文件内容，如果文件不存在，则会创建一个新文件。
        "a"：以追加方式打开文件。如果文件存在，则在文件末尾进行写入，如果文件不存在，则会创建一个新文件。
        "r+"：以读写方式打开文件。文件必须存在，可以同时读取和写入文件内容。
        "w+"：以读写方式打开文件。如果文件存在，则会清空文件内容，如果文件不存在，则会创建一个新文件。
        "a+"：以追加和读取方式打开文件。如果文件存在，则在文件末尾进行写入，如果文件不存在，则会创建一个新文件。
示例：

FILE *file = fopen("example.txt", "r");
if (file == NULL) {
    // 文件打开失败的处理
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

int fclose(FILE *stream)：
    功能：关闭打开的文件，并释放相关资源。
    参数：stream为要关闭的文件指针。
    返回值：成功关闭文件时，返回0；关闭失败时，返回非0值。

示例：

FILE *file = fopen("example.txt", "r");
// 对文件的读写操作
int result = fclose(file);
if (result != 0) {
    // 文件关闭失败的处理
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

size_t fread(void *ptr, size_t size, size_t count, FILE *stream)：

    功能：从文件中读取数据到指定的缓冲区中。
    参数：ptr是指向接收数据的缓冲区指针；size是每个元素的字节数；count是要读取的元素个数；stream为要读取的文件指针。
    返回值：返回实际读取的元素个数。

示例：

FILE *file = fopen("example.txt", "r");
char buffer[100];
size_t result = fread(buffer, sizeof(char), 100, file);

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

size_t fwrite(const void *ptr, size_t size, size_t count, FILE *stream)：

    功能：将指定的数据写入文件中。
    参数：ptr是要写入的数据的缓冲区指针；size是每个元素的字节数；count是要写入的元素个数；stream为要写入的文件指针。
    返回值：返回实际写入的元素个数。

示例：

FILE *file = fopen("example.txt", "w");
char buffer[] = "Hello, World!";
size_t result = fwrite(buffer, sizeof(char), strlen(buffer), file);

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

char *fgets(char *str, int size, FILE *stream)：

    功能：从指定的文件中读取一行文本。
    参数：str 是一个指向字符数组的指针，用于存储读取的文本；size 是要读取的最大字符数；stream 是要读取的文件指针。
    返回值：如果成功读取一行文本，则返回str；如果到达文件末尾或出现错误，则返回NULL。
示例：

FILE *file = fopen("example.txt", "r");
char buffer[100];
if (fgets(buffer, 100, file) != NULL) {
    // 使用读取的文本进行处理
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

int fputs(const char *str, FILE *stream)：

    功能：向指定的文件中写入一个字符串。
    参数：str 是要写入的字符串；stream 是要写入的文件指针。
    返回值：如果成功写入字符串，则返回非负值；如果出现错误，则返回EOF。
示例：

FILE *file = fopen("example.txt", "w");
const char *text = "Hello, World!";
if (fputs(text, file) != EOF) {
    // 字符串写入成功
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

int ferror(FILE *stream)：

    功能：检查指定的文件流是否出现错误。
    参数：stream 是要检查的文件指针。
    返回值：如果出现错误，则返回非零值；否则返回0。
示例：

FILE *file = fopen("example.txt", "r");
if (file == NULL) {
    // 文件打开失败
} else {
    // 文件打开成功
    if (ferror(file)) {
        // 出现错误
    }
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

void clearerr(FILE *stream)：

    功能：清除指定的文件流的错误和文件结束标志。
    参数：stream 是要清除错误和文件结束标志的文件指针。
示例：

FILE *file = fopen("example.txt", "r");
if (file == NULL) {
    // 文件打开失败
} else {
    // 文件打开成功
    clearerr(file); // 清除错误和文件结束标志
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

int fprintf(FILE *stream, const char *format, ...)：

    功能：向文件中写入格式化的数据。
    参数：stream为要写入的文件指针；format为要写入的格式化字符串；后续参数是要写入的数据。
    返回值：成功写入字符数。

示例：

FILE *file = fopen("example.txt", "w");
int num = 42;
fprintf(file, "The answer is %d", num);

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

int fscanf(FILE *stream, const char *format, ...)：

    功能：从文件中读取格式化的数据。
    参数：stream为要读取的文件指针；format为要读取的格式化字符串；后续参数是要读取的数据的地址。
    返回值：成功读取的数据个数。

示例：

FILE *file = fopen("example.txt", "r");
int num;
fscanf(file, "%d", &num);

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

int fseek(FILE *stream, long int offset, int origin)：

    功能：将文件指针指向指定位置。
    参数：stream为要操作的文件指针；offset为指针position的偏移量；origin为起始位置（SEEK_SET、SEEK_CUR或SEEK_END）。
    返回值：成功返回0，失败返回非0值。

示例：

FILE *file = fopen("example.txt", "r");
fseek(file, 0, SEEK_END); // 将指针移动到文件末尾

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

long int ftell(FILE *stream)：

    功能：返回文件指针的当前位置。
    参数：stream为要操作的文件指针。
    返回值：当前指针的位置。

示例：

FILE *file = fopen("example.txt", "r");
long int position = ftell(file); // 获取当前指针位置

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

int feof(FILE *stream)：

    功能：检测文件是否已到达文件末尾。
    参数：stream为要操作的文件指针。
    返回值：如果已到达文件末尾，返回非0值；否则返回0。

示例：

FILE *file = fopen("example.txt", "r");
while (!feof(file)) {
    // 读取文件内容的处理
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

void __cdecl rewind(FILE *_File)：
    功能：重置文件位置标识符
    参数：_File为文件指针
    返回值：无
示例：

FILE *file = fopen("example.txt", "r");
rewind(file);//处理文件位置标识符
    
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

int __cdecl fseek(FILE *_File,long _Offset,int _Origin);
    功能：改变文件位置标识符
    参数：_File为文件指针
            _Offset为位移值【即移动的多少】
                正数 向前移动 例： 100L 
                负数 向后移动 例：-100L
                单位 字节
                注意：结尾加L【代表长整型】
            _Origin起始点
                SEEK_SET 0 文件头部
                SEEK_CUR 1 当前位置
                SEEK_END 2 文件尾部
    返回值：无
示例：

FILE *file = fopen("example.txt", "r");

fseek(file,100L,0)      文件头部后移100个字节的位置 【仅正数】

fseek(file,100L,1)      当前位置后移100个字节的位置
fseek(file,-100L,1)     当前位置前移100个字节的位置

fseek(file,-100L,2)     文件尾部前移100个字节的位置 【仅负数】

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

long __cdecl ftell(FILE *_File);
    功能：测定当前文件位置标识符位置
    参数：_File为文件指针
    返回值：
        成功-返回当前位置
        失败-返回-1L
示例：

i=ftell(file);              //i存放当前文件位置
if(i==-1L) printf("错误");  //如果出错则输出

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

int __cdecl ferror(FILE *_File);
    功能：检测调用文件函数后是否出错
    参数：_File为文件指针
    返回值：
        未出错：0
        出错：  非零值
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

void __cdecl clearerr(FILE *_File);
    功能：使文件出错标志与文件结束标志变为0
    参数：_File为文件指针
    返回值：无

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
